-- solution for
-- http://adventofcode.com/2017/day/1

module Main where

import Data.Char (isDigit)
import Util.Main1 (main12)

main :: IO ()
main = main12 "2017-01"
       day01 captcha1
       day01 captcha2

captcha1 :: String -> String
captcha1 = show . comPair . rot1 . fromString

captcha2 :: String -> String
captcha2 = show . comPair . rot0'5 . fromString

rot1, rot0'5 :: [b] -> [(b, b)]

rot1 xs@(x1 : xs') = zip xs (xs' ++ [x1])
rot1 _             = error "rot1: empty list"

rot0'5 xs
  | even len  = zip xs (zs ++ ys)
  | otherwise = error "rot0'5: odd list length"
  where
    len = length xs
    (ys, zs) = splitAt (len `div` 2) xs

comPair :: [(Int, Int)] -> Int
comPair =
  sum . map fst . filter (uncurry (==))

fromString :: String -> [Int]
fromString = map (\ c -> fromEnum c - fromEnum '0') . filter isDigit

-- ----------------------------------------

exp1, exp2, res1, res2 :: String

exp1 = "1158"
res1 = captcha1 day01

exp2 = "1132"
res2 = captcha2 day01

day01 = "3294199471327195994824832197564859876682638188889768298894243832665654681412886862234525991553276578641265589959178414218389329361496673991614673626344552179413995562266818138372393213966143124914469397692587251112663217862879233226763533911128893354536353213847122251463857894159819828724827969576432191847787772732881266875469721189331882228146576832921314638221317393256471998598117289632684663355273845983933845721713497811766995367795857965222183668765517454263354111134841334631345111596131682726196574763165187889337599583345634413436165539744188866156771585647718555182529936669683581662398618765391487164715724849894563314426959348119286955144439452731762666568741612153254469131724137699832984728937865956711925592628456617133695259554548719328229938621332325125972547181236812263887375866231118312954369432937359357266467383318326239572877314765121844831126178173988799765218913178825966268816476559792947359956859989228917136267178571776316345292573489873792149646548747995389669692188457724414468727192819919448275922166321158141365237545222633688372891451842434458527698774342111482498999383831492577615154591278719656798277377363284379468757998373193231795767644654155432692988651312845433511879457921638934877557575241394363721667237778962455961493559848522582413748218971212486373232795878362964873855994697149692824917183375545192119453587398199912564474614219929345185468661129966379693813498542474732198176496694746111576925715493967296487258237854152382365579876894391815759815373319159213475555251488754279888245492373595471189191353244684697662848376529881512529221627313527441221459672786923145165989611223372241149929436247374818467481641931872972582295425936998535194423916544367799522276914445231582272368388831834437562752119325286474352863554693373718848649568451797751926315617575295381964426843625282819524747119726872193569785611959896776143539915299968276374712996485367853494734376257511273443736433464496287219615697341973131715166768916149828396454638596713572963686159214116763"
