{-# LANGUAGE TupleSections #-}
{-# LANGUAGE UnboxedTuples #-}
{-# LANGUAGE BangPatterns #-}

-- solution for
-- http://adventofcode.com/2018/day/19

module Main where

import           Data.Bits       ((.&.), (.|.))
import           Data.Map.Strict (Map)
import qualified Data.Map.Strict as M
import           Data.Set        (Set)
import qualified Data.Set        as S
import           Data.List       (foldl', intercalate, intersect, delete)
import           Data.Relation   (Rel')
import qualified Data.Relation   as R

import           Util.Main1 (main12)

-- import           Control.Applicative      (some, many)
import           Control.Arrow (second)
import           Control.Monad.State.Strict
import           Control.Monad.Except
import           Control.Monad.Reader

import           Text.Megaparsec hiding (State)
import           Text.Megaparsec.Char

import Debug.Trace

-- ----------------------------------------

main :: IO ()
main = do
  main12 "2018-19"
    inp captcha1
    inp captcha2

captcha1 :: String -> String
captcha1 = show . solve1 . fromString

captcha2 :: String -> String
captcha2 = show . solve2 . fromString

-- ----------------------------------------

withTrace :: Bool
withTrace = True

trace' :: String -> a -> a
trace' s
  | withTrace = trace s
  | otherwise = id

-- ----------------------------------------

data Dir   = N | E | S | W deriving (Show, Read, Eq)

data Regex = Unit
           | Sym [Dir]
           | Seq [Regex]
           | Alt [Regex]
           deriving (Show)

type Point  = (Int, Int)
type Rooms = Set  Point
type Doors = Rel' Point

data RegMap = RM
              { rooms :: ! Rooms   -- the set of end points in the maze
              , doors :: ! Doors   -- the set of connected points in the maze
              }
              deriving Show

-- ----------------------------------------

unit :: Point
unit = (0, 0)

infixl 6 .+.
(.+.) :: Point -> Point -> Point
(x1, y1) .+. (x2, y2) = (x1 + x2, y1 + y2)

shiftRooms :: Point -> Rooms -> Rooms
shiftRooms p = S.map (.+. p)

shiftDoors :: Point -> Doors -> Doors
shiftDoors p = R.foldr shiftP R.empty
  where
    shiftP k v = R.insert (k .+. p) (v .+. p)

-- --------------------
--
-- reg map construction

zeroRegMap :: RegMap
zeroRegMap = RM S.empty R.empty

unitRegMap :: RegMap
unitRegMap = RM (S.singleton unit) R.empty

dir2regMap :: Dir -> RegMap
dir2regMap d = RM { rooms = S.singleton p1
                  , doors = R.singleton unit p1
                  }
  where
    p1 = move d unit

move :: Dir -> Point -> Point
move N (x, y) = (x    , y - 1)
move E (x, y) = (x + 1, y    )
move S (x, y) = (x    , y + 1)
move W (x, y) = (x - 1, y)

-- --------------------
--
-- basic reg map combinators

shiftRegMap :: Point -> RegMap -> RegMap
shiftRegMap p (RM rs ds) = RM (shiftRooms p rs) (shiftDoors p ds)

-- union of 2 RegMaps
u :: RegMap -> RegMap -> RegMap
RM rs1 ds1 `u` RM rs2 ds2 = RM (rs1 `S.union` rs2) (ds1 `R.union` ds2)

-- composition fo 2 RegMaps
(.>>.) :: RegMap -> RegMap -> RegMap
rm1 .>>. rm2 = RM (rooms rm2') (doors rm1 `R.union` doors rm2')
  where
    rm2' = S.fold (\ p acc -> shiftRegMap p rm2 `u` acc) zeroRegMap (rooms rm1)

instance Semigroup RegMap where
  (<>) = (.>>.)

instance Monoid RegMap where
  mempty = unitRegMap

-- a 2. monoid for reg map is (`u`, zeroRegMap)


-- ----------------------------------------
--
-- the core operation

toRegMap :: Regex -> RegMap
toRegMap Unit     = mempty
toRegMap (Sym ds) = mconcat  $ map dir2regMap ds
toRegMap (Seq es) = mconcat  $ map toRegMap   es
toRegMap (Alt es) = foldr1 u $ map toRegMap es

maxMinPath :: Point -> Doors -> Int
maxMinPath r drs = go S.empty (S.singleton r) 0
  where
    go oldRooms curRooms cnt
      | S.null curRooms'  = trace' (show curRooms) $
                            cnt
      | otherwise         = go oldRooms' curRooms' (cnt + 1)
      where
        oldRooms' = oldRooms `S.union` curRooms
        curRooms' = (drs `R.applyS` curRooms) S.\\ oldRooms'

solve1 :: Regex -> Int
solve1 = maxMinPath unit .  R.symmetric . doors . toRegMap

solve2 :: Regex -> Int
solve2 = undefined

solve' re = maxMinPath unit .  R.symmetric . doors . toRegMap $ re
  where


-- ----------------------------------------

showRegex :: Regex -> String
showRegex re = "^" ++ showRegex' re ++ "$"
  where
    showRegex' Unit     = ""
    showRegex' (Sym ds) = concatMap show ds
    showRegex' (Seq es) = concatMap showRegex' es
    showRegex' (Alt es) = "(" ++ (intercalate "|" $ map showRegex' es) ++ ")"

showDoors :: Doors -> String
showDoors = show . R.toList

showRooms :: Rooms -> String
showRooms = show . S.toAscList

showRegMap :: RegMap -> String
showRegMap (RM rs ds) = unwords
  [ "rooms ="
  , showRooms rs ++ ","
  , "doors ="
  , showDoors ds
  ]

-- ----------------------------------------

type SP = Parsec () String

fromString :: String -> Regex
fromString s = maybe (error "no parse") id $ parseMaybe pRegex s

pRegex :: SP Regex
pRegex = char '^' *> pExs <* char '$' <* optional nl
  where
    nl = char '\n'

pDir :: SP Dir
pDir = (read . (:[])) <$> oneOf "NESW"

pEx :: SP Regex
pEx =
  (Sym <$> some pDir)
  <|>
  between (char '(') (char ')') pAlt

pExs :: SP Regex
pExs = Seq <$> some pEx

pExs0 :: SP Regex
pExs0 = option Unit pExs

pAlt :: SP Regex
pAlt = Alt <$> sepBy1 pExs0 (char '|')

-- ----------------------------------------

ex1, ex2, ex3, ex4 :: String
ex1 = "^ENWWW(NEEE|SSE(EE|N))$"
ex2 = "^ENNWSWW(NEWS|)SSSEEN(WNSE|)EE(SWEN|)NNN$"
ex3 = "^ESSWWN(E|NNENN(EESS(WNSE|)SSS|WWWSSSSE(SW|NNNE)))$"
ex4 = "^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$"

res, res1, res2, res3, res4 :: Int
res1 =  3
res2 = 10
res3 = 23
res4 = 31
res  = 3644

inp' :: IO String
inp' = readFile "Year18/Day20/day20.txt"

inp :: String
inp = "^SSWNWSWWNWNNEES(EENWNNEEESEESSWSW(SESESESESWWNWSWNWNN(ESEWNW|)WSSWWWWSSENESSENEN(W|ESSWSEEENEN(WWSNEE|)EEEESESEEEESENESENEESWSWWWSEESENEEENW(W|NNNNESSEEEEEEENWNWWWWS(EEE|WNNWWWNNNWNWWNNESENEESWSEENNNWNENNWSWSWS(WNWWWSE(E|SSSSEESESWWWSEESE(N|ESWWWWN(E|WWWNEENWNWSWNNNWSSSWNNNNWNWNW(SSWSEE(N|ESW(SESSEESE(SEEEWWWN|)N|W))|NENNWSWNNWWS(ESNW|)WWWWSWNWNEENWWNEENNNESENNNWSWNNWNEENNWWS(WWWWNENEE(SWEN|)NESENESEEESESSENNNNW(NEEESWSSESWSESWSEEENENEEENWWWNENWNENENESSESESESEEESENNENEESSESWWW(NENSWS|)SEESSENESSSWNWSSEEEENWNNENNNWS(W(NNNENENEENENESESSWW(NEWS|)SESEEENW(NEENENESESWSEESSESENNWNEESSESEEESWSWNWSSSEEESSWSWSSSSENNNENESSEEENWWNNWNNEEESESS(WNW(NWES|)S|EENNNNWW(SESSNNWN|)NENNWSWNNWNNENESS(EE(NNW(S|NENNWWWWNENENEE(NNWSWWNWWSWWNENNNNESEESS(WNWSNESE|)E(EENNWNNWWW(NEENWWWWWSES(ENSW|)WWSWSWNNWSWNWNWSWNWNNWWWNNENNENNWWS(E|WSS(ENSW|)SSSSWNWSWWNNE(NNWSWSWSESWWNNWWNNNEESE(SWWNSEEN|)NNNWWWS(WWSSE(N|SSSWSSSENEN(W|NESSSESSSSSEEENNESSEESENEENNNWSWWNW(SSEEEWWWNN|)WNNN(EESS(WNSE|)E(S|ENWNEEE(NWWEES|)SESESENESSSSESWWSWSWSS(ENEEN(W|EN(W|ENNNN(NWSSNNES|)ESSSSENE(SESWWSSEEEN(E(SSES(ENE(S|E)|WS(SSSSSW(NNWWNW(S|WNNNWSWWWNN(W|NESSENENN(WSNE|)NESSSESSSENNNESE(N|SSW(SEWN|)N)))|SEE(S(ENSW|)WWW(WW|N)|NN))|E))|NN(WSNE|)E(S|E|N))|WW)|NWNNENE(SSWENN|)N)))|WWNNNW(NEENNNN(NWNSES|)ESSSS(SWSSNNEN|)ENENWNE(WSESWSNENWNE|)|SWSESW(WNWNN(WN(WWWWSSWSEEES(WS(E|WNWWWNNWNWWWWWNNWSSWNNNNNWNEENWWWNNEES(W|EEESEEE(NWNENNENWNNNWNEENNENEEESES(ENESSWSEEES(WWWSNEEE|)SE(SSWNSENN|)NNNENWNNNENNENEEESWWSSSSENESENNWWNEENNNNENWWNN(EEEESSSW(NNWWEESS|)SWSSSENNESSSSENNENWNEENNNESSSEEESWSWWN(WSSESSWNW(N|SWWWNW(NEWS|)SSEESSENEN(W|EEESSWW(NEWS|)WSWSWSSSS(SEEE(S|ENNNWWN(NESENEEN(NENEESWSSEEENW(NENWNENNWWS(SWNWW(S(E|S)|NEENW(WWSSNNEE|)NENNNNESEEE(SWSWW(NEWS|)SES(ENE(N|SSSSSSSSSSSSW(SESSNNWN|)NNWSWNWN(W(SS(E|WWNENW)|NN)|EEE))|W)|NWWNWNEEE(SWEN|)NWWWWSSWNWN(E|WS(WWN(WWSESSSW(NN|W)|E)|SESS(WN|EN)))))|E)|W)|WWW)|WSSSEENW(ESWWNNSSEENW|)))|WNWSWNNNWSW(NNEEENWWNEEE(NWWWN(WWWNWNENN(SSWSESNWNENN|)|E)|S(SSSWNSENNN|)E)|W))))|E)|WWSESWWSEEESWWWWSWNNENWNN(EESWENWW|)WSWSSWSEE(SWSSE(NESNWS|)SWWWS(WNWWNNEES(ENE(S|NWNNNWWNWWWSSESES(WWSWSS(WNWSSWWWSSSSWSEEE(ESWWWSSESS(WWN(NWWS(E|WNNNNNENWNWNWNENWWNWWWNWWWSEESWSSSSWWNENWNENWWNENWNWSSSWNNWSWNNENWNWWSESSWNWNWSWSWWWSWSEEESSSWSWWNWSWSWWSSESWWWNENNWSWSWSESWSSESEENWN(W|NEES(W|ESWSESSESSSWSSSSENNNEENENESESEENWNWNWWNENWWNEEEESWSESESENNNW(NEENESENNENNNNNNNEESSSSSEEENNWSWNN(EEESEENESESESENNWNEE(SSSSSWSWWNWSWSSWWNWWWNWW(SESWSSWNN(WSSSWW(SSEEN(W|EEEENNEEEESSSWSWWWN(ENNES(ENSW|)S|WSWW(NEWS|)SESENEESWSEES(EENEENEENESES(WWS(E|SWSW(NN(ENSW|)W|S(ESWSS(ENSW|)S|W)))|EESSESESEES(W|ENNE(S|NESEN(EES(S(EN(N|E)|S)|W)|NWN(E|WN(WWWSSEE(NWES|)(SWW(SEWN|)WNNW(S|N(WWNENWW(NEENNWSWWWWSWNNW(NN(ENNEESESE(NN(W|N)|ESWWWNW(N|S(SEEEWWWN|)W))|WWWWN(WSWSSWW(EENNENSWSSWW|)|E))|SSSWSWWSE(EENEEN(EENWESWW|)W|S))|S)|E))|E)|E))))))|WWWWS(WWNWNEN(NNWSWS(E|SSWWWSSS(ENNEE(SWEN|)E|SWWSWNWNEEENWWNNNESSENNENENE(SSWENN|)N(E|WWSWWS(E|WWSW(WSESS(ENNSSW|)SWWWSEEESWSESSWWSWSSSWNWWWWWNNEEENNWWNWWSES(WSSSWNWNENWNNNNWSWWWNWNWSWSEESEESEE(NWES|)SWSWWSWNWWSESESWSWSWWNWSSSWWNENNNWSSWWSSE(N|SWSSEEESEESEEESWWWWSEESESWSSESEESWSWNWSSSWSESENNESSESWWWSWSESSWNWSSWWWSWSWNNNNWSSWWSSESE(NNWESS|)ESSWSESSSEESWSWNWSWNWSSEESSESESSWWSWNWWNEEE(E|NWNWSWWNWW(NNNEESS(WNSE|)E(NNNWNENWNEENWNNWWSS(ENSW|)SW(NNNNNEEE(NNNNNEE(SSWNSENN|)ENNWWNNNENEESWSEESSW(NWWNSEES|)SSEEN(W|NEESS(SW(WS(W(S|N)|EE)|NN)|ENNN(ESNW|)WWWNNNENWNNESENENNNWSWWNWNWWNNESENNWN(WNENWNWSSWSSWNWWW(SSSENNESESENE(N(E|N)|SSWWSSWWNN(E(N|S)|WSSSESWSSESWSSESENN(NE(SSSSWWW(SESWSEE(NNEEEWWWSS|)SSSWWNENW(ESWSEEWWNENW|)|N)|ENWWN(W|EEEES(W|ENNE(SSSS|N(EEE|WWWNW(SWS(WNSE|)EEE|NEESE(E|N)))))))|W)))|NEEENWWNW(NENNNEESESS(EENNE(NEENWWWNENWNEESENEESWS(EENNNENES(ENE(ES(W|E(E|N))|NWWWWWS(E|WS(WWNNWWNNEENWNWNWNEEENWWWWWNEEEEENNWNWWWWNNWNNNESEENNNEENEENWNWSWWS(WNNWWWNW(NNEENWNENNWW(NENNW(S|NEESEESSW(NWSNES|)SSSSSESEEENNESESS(W(WWW(SEWN|)WWWN(W|E)|N)|ES(EEENEESENEEENWWNENEENNNNWWWNWSSWNNWWSSE(SEEES(EENWN(E|W)|SWNWSWSES(ENSW|)WWNWNNN(ES(E|S)|NWSWSS(E(N|SS(WN|SEN))|WNNNENNNNWNWSWSESS(ENNSSW|)SSWWWSE(SSWNWNNNEEENNWW(SEWN|)NENWWNW(S|NNNEN(EEEESEEN(W|EEEEEESSEESWWSWSS(WNNWSWNNENESENNWWWWS(WS(WWN(E|WWSS(ENSW|)WNN(WS|NEE))|SE(SSE(SWSEWNEN|)E|N))|E)|EEESENNN(ENENWNW(WN(WSNE|)EEEEEEEEEESENESSESEESSSWSSEE(SS(WWS(E|WWWS(EEE|WWS(WS(E|SWNWSWWSSWWWN(WWSESEEESEEN(W|EENWN(WSNE|)EESSSSESWSWNNNWSSWNWSWNWWN(WSSSSSEENWNNESESESSW(SWSWSSSWWWWSESS(EEENWN(WSNE|)EEENESESESSENENNW(S|WNNNENEENNEEESSE(NNNN(ESNW|)NWWN(EE|WSWSS(ENESEN|WWWW(NN(ESEEWWNW|)W|SSE(NEESWENWWS|)SWSWS(ESNW|)WW(NENENSWSWS|)S)))|SWSESSE(SESWWWWNNE(SEWN|)NWWNN(WWSWSEE(N|SSE(SWSESSEE(NNWSNESS|)EESWWW(WWNNW(SWWW(N(EE|NNWSWW(NNE(E|S)|W(SEWN|)W))|SS)|N)|SSE(SSW(N|WWW)|NE(EE|S)))|N))|E(NWNEWSES|)S)|N)))|WNWNWSSWSEE(SWWS(WWSW(S|N(NENNE(SS|NNWW(NNNEESS(WNSE|)E(NNEEES(WWSEWNEE|)EEENWWNNEE(SWEN|)EN(E|WWNWSWWNWWSWWWW(SEEES(WW|ENE(EESWWEENWW|)N)|WWNENENWW(NEN(ESESSES(ENENNWNENESSENNNWN(WSWW(NEWS|)S(E|S(SSE|WNW))|E(N|ESSESE(NNWNSESS|)SWSESWW(S|WWNEENN(SSWWSEWNEENN|))))|WW)|W)|SWW(SSENSWNN|)W)))|SS)|S(E|S(WNWESE|)S)))|WW))|EE)|N|E))|N)|E))|ENNE(ENE(S|NNNWNNENESS(SSES(SWNSEN|)ENENNNEEESE(NNWWWWWSW(SSENSWNN|)NNNENWNWWNN(ESEEE(NWWEES|)S(W|SEESS(WNWSWENESE|)ENE(S|ENWWNWNWS(NESESEWNWNWS|)))|W(W|SSSWSES(SW(WN(N|E)|SSSSS(EN|SWW))|EENWNE)))|EE|SWWW(NEWS|)S)|W))|SS)))|E)))|ENES(ENSW|)S)|N(NENNNESSENNENNESES(WSWSNENE|)ENENN(ESSENESSES(ENESENESS(W|ENNEENEEEEENN(WWS(E|WWWN(EE|WWWSS(EENWESWW|)WWWWNEN(ESENSWNW|)WWW))|EESSSENENEESEEEE(SS(WWWN(WSSSE(SSWNWSWWWW(NENWNEEN(ESE(SWWSEWNEEN|)NN(N|W)|WWN(NN|WWWWWSEEEESSSWNNWWW(SEE|WWNE)))|SES(SENE(NWES|)SSWSSSS(EN|WNN)|W))|EEN(WW|E))|EE)|E)|NWWWN(WWWWSNEEEE|)EEEEEEEESEE(N(W|E)|S))))|S)|WSWNWWWWWWSES(EENWESWW|)W(WNW(WNEEWWSE|)S|SSS))|W))|SS)|WSW(W|N))))|WWWWSSENESSSWWNE(WSEENNSSWWNE|)))|EE))))|N)|W)))|S(E|SS))|SSSSENNEESSES(S|WW(WWSSSSE(SWSEE(N|SWSE(ENESENESE(WNWSWNSENESE|)|SSWNW(SSSEEESSSSSSSSEE(NEENWWNW(SS|NENN(NW(NNWWWEEESS|)SS|E))|SWWSWNNNWSSW(SS(E(EEESE(NNWESS|)(SS|E)|N)|SSS)|NNNNENE(SSWENN|)NWW(S|NEN(ESNW|)W)))|NN)))|NNN)|NN)))|E)|E)))|SSW(SEESW(WW|S)|N))|WW)|SSS)|WNW(SSEESNWWNN|)N)|S))|EEESWSSES(E(NN(NEWS|)W|EESSSS(E|SWSESWW(SESWWN|N)))|S|W))))|S(WW|ESE(E|S(SSESSWWNE(WSEENNSSWWNE|)|W))))|SSE(SWEN|)N)|EE|S)|SSSEE(NWNSES|)SESWWSW(NNEWSS|)SSSSSSEENEENWNENEENWNEEN(EN(W|EENWNNNEEESWS(WNSE|)SENENNNWWNWSWN(WWSESNWNEE|)NENNENESESSS(WNNWSNESSE|)ESESWSEEENEENEENWWNNEENWNENESSSESW(WW|SSENESENESSWSSWSWWWSEEESWWSESSEEESWSEEENNNEESSSESWSEEESENNWWNEEENNEEESSSESWWSWNN(ENWNEWSESW|)WSSS(WWWNWSWNWSWWNWSWWNWNWNENE(NWWNNWSSS(SSWWWSS(EEEE(NWWWEEES|)E|WWWNNESENNENNNWWSS(ENSW|)WWS(WSESSWWN(WWNENWNWNENNENN(WSW(N|WSWSE(ENSW|)SWWWSEEESWWSEESWWS(WWWN(NEE(SWEN|)N|WSWNWS)|EEE(NNN|EE)))|NEEESSSE(SWWW(WSSE(NE(EE|S)|SS)|NENWNE)|NNENNESEENNN(WS(WWWS(W(W|N)|S)|S)|ES(SSSWSS(WNNWSWSE(WNENESNWSWSE|)|E(NENSWS|)SWSSE(SWEN|)N)|ENN(W|ESE(NES|SW))))))|E)|EE))|E)|SSE(EN(EES(ENNNNSSSSW|)(S|W)|W)|S))|EEENESENNENENENWNEEEESWWSSENEENNENNWSWNNWNWNNEENNWWWS(WSSWWSWNNENE(NNE(S|ENWWNNEEES(WW|EENWNEENNNWSWS(WNNWWNWSSEESWWS(WSSWWWWSESSENNEESWS(SWWWNNWSWNWNWNNESEE(SWEN|)NWNWNENENNWNWWNWWNENNESSESENESES(ESESEE(NWNWNWNENWW(NENNESSESSENNEEESEEESENNNNWWNNNWSWNNWWNNNNWNWNWNENNENENWWWWNNWWSSE(N|SESE(NEWS|)SWWWSWWWWWNNWWSWSWSSEESSENNEESSW(SESWSSESWSSWSSS(SSSSENESESWWWWWWWNENNNENWNNWWNENNNNNWSSSWWWWWW(NNEEENESE(SWWWWEEEEN|)NNWWWWS(E|WWNENW(WW|NENENENESEENNNWNENESESS(W(N|SESWSESWWWS(EEES(W|ESSESESWW(N|SEE(ENNNNNWS(WNNWNE|S)|SW(SES(SSSWSSEN(SWNNENSWSSEN|)|W)|W))))|WWWNEEN(W|EE)))|ENENNW(S|NENENNNENWWWNWNEESEEEEENNN(ESSSSWSWNWSSEEESWSEE(SWSSSS(WWNENNWSWNWN(WSSEWNNE|)NN(ESSE(E|NN)|N)|ENN(ESEWNW|)N)|NEENWNEEESWSEEESWWSEEEE(ESEES(ENSW|)WWW(N|SWSSE(SS(WNWNNSSESE|)EE(NWES|)ESE(N|SSENEEN(ESSSWSESSESWSSEEN(W|NNNWNNNNEEESSESSSESEENEEENEN(WWWS(WW(NENWNNEE(NWWWW(SES(SSS|W)|WN(E|WSWWNENEE(WWSWSEWNENEE|)))|ESW(SEEEWWWN|)W)|S)|E)|ESESWSEEEEENWWNENWN(EENESSWSESSSWSWNWSSESENESSESESWSSWWSEESENEEESEESWWSSSSWWNWWNENWN(WNWWSWWNNE(S|NWNNNEN(NWSWNWNNWN(EESSENN(SSWNNWESSENN|)|WWSESESSWSSESSWNWWWNWSSESEE(NWES|)SWSESWSWSEENEESSW(WWSSWNNWNWSSSWWSSSSEESWWWWSEESWSSSWSWSES(ENEN(ENENESEESWWWSWS(EEEN(W|ESENNEEENNWNWWS(WNW(NWWN(WSS(SW(N|S)|EE)|EEESENESEESENNWWNNWSWWNWW(SEWN|)NNEES(W|E(NESENEENWNWWN(WSS(EE|WWW(NN|WWSSEN))|EEEEEESESWWW(N(W|E)|SEEESWSEEEESSSWSEEENWNNESESENNENNWNEEEEESENESSSWNWSSEEESSSSWWNNWWSESWWNNNE(EEESSNNWWW|)NNWNN(ESNW|)WSSS(E|SSSWN(NN|WWSESEESEEEEESWWWS(EEEENESENEES(EEENESEEENWWNNNWWNENWNNWWNNWWWSSENESSWSESWSSS(WW(NNNE(SS|NWN(NNNW(SS|NNWWNNWWNNWWSESSS(ENESNWSW|)WWNN(ESNW|)NW(SSSWNNWWSWNNWWNWWNN(WWWW(NWNEE(S|NW(WWSSSE|NENNW(N(W|E|N)|S)))|SESS(WNSE|)EE(NWNEWSES|)EESEESSW(N|SEENESE(ESWS(WNWWWEEESE|)E(S|E)|NN)))|E(ESWENW|)N)|NENEN(WWSNEE|)ESEEENNNEENNWSWNWNNESENESESESSEESWWW(NN|SSWSEESWWSW(SEESENN(W|ENNEESSW(SWSS(WW|ENENESEEESWWSEEENESEENEESE(SSSWNWSSWNNWWN(EEE(N|E)|WSWNW(WWNNWESSEE|)SSESSESEESWS(WNSE|)ESSENNNESSES(ENNWNENNW(NEWS|)SWNW(WWNWNEES(NWWSESNWNEES|)|S)|W))|NNNWWS(E|WNNWNWSWWS(EES(E(S|N)|W)|WNNWW(SESNWN|)NNNW(SWNWSWN(SENESEWNWSWN|)|NEEENNNENWWSSSWNNNWWNNWWNEEENEENWWNWSWNNNNNEESENESEESSWWN(WS(SEESENEESENNESSEESE(NNNWSWNNWNNWNNWNWWNWSWSWNNWNNESE(S|NNENWWSWNNEENWNNEES(W|EENESSESENNEEE(NNNNNWSSWSS(ENSW|)WNW(SS|NNNES(S|ENNWWN(WWW(N|SSSWSWS(EE(NESENNNW(NEWS|)S|S)|WNWWSSSWWWWWSWNWWSSWNNNENWNEENNWWS(E|WNWNNNESSEEENESEEEEEEENWWWNWNWSW(SEEWWN|)NWSWWNNNNNENEENNNENN(ESSESESSSWWNW(NNESES|SSSS(WWNENNWSWSSS(NNNENEWSWSSS|)|ENEN(EESSSW(SEEE(NNNN(W(NWNENWNEN(SWSESWENWNEN|)|SSS)|E(E|S))|SSSS(ENEWSW|)WNWWS(E|WSWSS(EEN(W|N)|WWWWNENENWNEES(SSW|ENE))))|N(WSNE|)N)|W)))|WN(WSS(SSWNNWWWWWSEEEESS(WS(E|WNN(WWW(SS(EE(NWES|)SWWSEEESSS(WWWNEENWWWWWSSESWSWNWNNE(NWWSWNNNWWSSE(SWS(WS(WWNENNNNNWWWSWWWNNEE(SWEN|)NWN(EENN(NWWN(E|N)|ESESWSWSEENENE(NWES|)EESSENESS(SS|WWWW(SSSS|N(NESNWS|)W)))|WSWSWSWSWWWSWWNENEEN(E(S|E)|WNWWW(NNE(SEEWWN|)NWNWSSSW(ENNNESNWSSSW|)|SS(ENEWSW|)SSWSSW(SEENNESENEENESESWW(W|SEESSENEENENNN(EESWSEE(SWSES(EEE|WWSWSSWNNN(ENENSWSW|)WSWWSEES(W|SEEEN(ESSWS(ESEE|WN)|N)))|NNE(NWES|)SS)|WWN(WS(SES(EN|WSE)|W)|N)))|NN))))|E)|EEESSESSW(SSSSSWNWSSEEEEEENENWWWS(WNNENN(WSNE|)ENWNEESSENESSWS(WNWSNESE|)EEEE(SWWWSSS(W(WWWW|N)|SEESESSENEENWWN(EEESEEENNN(EEE(ENNNSSSW|)SSSWSW(NNENWESWSS|)SWNWWWSSWW(NEWS|)SEESSWNWWSSSWNNWWSSE(N|SSWSWWWWNNW(NNESENNENWNENWWSW(SESWENWN|)NWN(EEEEESSS(SSSS(E|W(NN|S(WNSE|)E))|ENEN(EESWSW|WNN(ESNW|)N))|W(S|W))|SS(SSESENEN(ESSSSEENEEE(SSSWNNWSWWWWW(WSEEEEES(E(SSEEE(SWEN|)NNWWSE|N)|W)|NNE(N|S))|EEENNNENNEE(NNWWWWN(WSW(NN|SSWSW(NNEWSS|)SSENENEE(ENN(WWSEWNEE|)EE|SWSESWW(N|WWWW(S|NEN(N|W)))))|ENNESSENNNN(ESSS(S|ENESE(NNWNN(WSSNNE|)N|EEENESS(W|EE(NWNSES|)SESWW(SEWN|)N)))|WW(SE|NE)))|SWSES(WSS(WNNSSE|)SESE(SSENESS(NNWSWNSENESS|)|N)|EE)))|WW)|W)))|WSSWNWWN(SEESENSWNWWN|))|WNWNN(ES|WSS)))|NWWN(E|NNNWN(E|W(NNWESS|)S(SEWN|)W)))|E)|N))|N)|S)|E(NNNNW|SSE))|W)|NNNE(NW(WSW|NE)|E))|E))|EE)|E)|N)))))|EEESENNNWSWN(SENESSNNWSWN|))))|SSSSWSESSSWNWSW(NW(NWW(SEWN|)NEENWN(EEE(ENWNEWSESW|)SSW(SEEWWN|)N|WSW(SWSEWNEN|)NNE(NWWSNEES|)E)|S)|SES(W|EE(NWES|)SSW(SE|WNE))))))|SSSWSWSEE(N|SWSSWSWWNWNWN(ENESE(NNWNEENENWNWWWW(N|WSESE(NESENSWNWS|)SSW(S|NWNWN(WWSWSEE(N|E)|N)))|S(ENSW|)(W|S))|WSSSWSS(WNNSSE|)EE(SWEN|)N(E(NWNSES|)SEEN(W|EEE(N(W|NN)|SSWS(WN(NEWS|)W|E)))|W))))|WWN(E|N))|E))))))|N))|NWWNEENNENW(ESWSSWENNENW|)))))|E))|W)|EENWNENNE(NWES|)SSSEESWWSW(ENEENWESWWSW|))|W)|WNWWS(WNN(E|WWN(E|WWSWWWWSES(WWWWN(WSWWNE|EENWNN(WSSNNE|)NEESEE(E(SWWWWN|EEE)|NWNWNEE(ENWWWWNWWN(WSSEESSEN(SWNNWWEESSEN|)|EE)|S)))|EEN(EE(N|EESWWW)|W))))|E))))))|S)))|S)|SE(E|N)))|W)|W)|WWWWWWNN(WWSWW(NENSWS|)S(WN|EEEN)|NEESEE(SWWWNSEEEN|)NENNWSW(N(WSNE|)NNENNE(SSS(ESSNNW|)W|NEE(SWEN|)NWWNNWWNNESEESSENNENE(S|NWWWS(E|WNNEEENNEEES(WS(WNSE|)E|ENNWNWSWNWSWWSESWWNNWSSWW(NNE(S|NEEEENENWNEENNWNWN(WWSSSWSESS(WWW(S|NNE(SEWN|)NW(NENE(NWW(S|NNNWNEE(SSS|NWWW(SS|NWN(NWS(WWNNNEES(WSNE|)E|S)|EEE(SW|NE)))))|S)|WSWWN(NWSSS(E(EE|S)|WNNWN(E|NWSSS(WNWESE|)E))|E)))|ENNNE(NWNSES|)E)|ENEN(EESWSS(WNSE|)EEEE(NWNW(SWEN|)NENEEEN(SWWWSWENEEEN|)|E|SSW(SEWN|)NWSWW(SSWSE|NE))|WN(E|NNNW(NNWSSNNESS|)SSSSS))))|SW(SS(E(NENESNWSWS|)SSW(N|SSS(WNWESE|)SEE(NNN(WSS|ESS)|S))|WWWNEE)|N))))))|S)))|N))|EESESWW(WSE(SS|EE)|N)))|EESSE(NNNWESSS|)S)|WS(SS|W))))|WW))|N))|NWNNWWNENWNWNWWWNNEES(W|ENENWNNWNWW(SWSES(EENWNSESWW|)W(SSSSS(EEN(ESEWNW|)W|S(W|S))|WNN(NE|WSS))|NEEEES(ESS(WNSE|)SSENE(EENWWWNEENE(NWWW(SEWN|)NEENWWWWNWSWWS(WNN|EEEES)|S)|SSWWWSEES(E(SES(W(WNSE|)SS|EE)|N)|W))|W)))))|WWSESWWWNWNEE(S|NWWWSWS(WNWSWSWNWNWW(NEN(NESSESEN(NWNNSSES|)EEE|W)|SSE(N|ESSEEN(W|ENESSWSWWWSSSESE(SWWSSWWSE(EE(ESNW|)NN|SW(WWN(W|ENWNEEENWW(NEE(NNWNWS(SEWN|)WNNNWSSW(SEWN|)NWSWNN(WSW(W|N)|ENE(S|N(ESEE(NWNENSWSES|)EESWS(ES|WN)|W)))|E)|WW))|S))|ENENN(EN(N|W|EESWS(E|SW(S(S|W)|N)))|WSW(WNEWSE|)S)))))|E)))))))|SWNWSSEESWWSSEESESENENEESWSWSWSES(WWNNWWWNE(NWWSWNWSWNWW(NEEEEEN(NNNN|WW)|SSSSEES(WWSWNW(NNE(NN(WSNE|)N|S)|S)|EES(W|SESENEE(ENWN(NWN(E|WSSS(ENSW|)WNNNNWWWS(WNN|EESW))|EE)|SSSSWNW(N(ENSW|)W(WNSE|)S|SS)))))|E)|ENNEE(ENNW(SWEN|)NN(ESNW|)WNWSWWNNN(ES(S|ENE(E|S))|WSSS(SEWN|)WW)|SSSESWS(WNNNNSSSSE|)EESS(WWNEWSEE|)ESSENENNW(WNNWNEEEEEE(SSWW(N(WWSEWNEE|)E|SSSE(NN|SESSSWSSSENESSWSESE(NNENWNENWW(NN(EES(W|EESE(N|SSESENEESWS(EEEN(ESNW|)WN(N(WW|NN)|E)|WW(SSSE(ENWNEWSESW|)S|WWW(W|NE(E|NNW(N|S)))))))|N)|W)|SWWNW(NNWNWWS(E|WNNNEEE(SWWEEN|)NWWWN(WSSSW(SESS(WWNE|ESS)|N)|NESEEN(WNE|ES)))|S))))|EN(E|N))|S))))|ENNENNESSESEE(SWWEEN|)NENNEEEESS(WNSE|)EENESE(SEENWESWWN|)NNWWW(S|NWN(EESNWW|)NWNENWWSWWWNNWNENEN(WWWW(WWWN(WSWENE|)N|SE(E|SWSESESSESES(EEN(ESNW|)WN(W|E)|WSWW(SE(S|E)|NWNE(ESNW|)NNW(SWEN|)N))))|NESSSE(N|ES(E|WWW(SEWN|)N)))))|N))|S)|SWS(SSWWNNW(WSESNWNE|)NE(ESS|NWN)|E))|W)|E)|EEE)|E)))|S)|EE))))|WWW(N|SWWSWSE(ENEWSW|)SSW(N|S))))))|EE)|NNNEE(SW|NESE)))|NN)))|ES(EE|S))|ESEENW))))|NENNWS)|NN)|NN(NNNNN|EEEEENNESSE(SWS(WWN(W(S|WW)|E)|S)|NE(NWES|)ES(W|E(S|E)))))|NWWW(S|NE(NWN(WSSSWW(NNE(S|N(NEEWWS|)W)|S)|E)|E)))|NNNNWSWNWSWNN(E|WNWWSWN(NEWS|)W(SSSSSESSENEEE(NWN(NNW(N|SSW(SE|WNNES))|E)|SWWSEESSWWS(WSWNWNWSS(E|WWWNWNW(W|SSESS(WNSE|)SESSW(N|S)|NNN(W|ENESSEES(EEESEN(EE|NWWNW(S|N(WSWNSENE|)(E|N)))|WW(WN|SESEN)))))|E))|WW)))|S))))|E)|E(NENNW(W|S)|S))|NWNENN(WSNE|)ESENNE)|EEN(W|N))|EENWN(WNWESE|)E))|W)|EEESWSSEN(SWNNENSWSSEN|))|NN))|WWW(WS|NE))|SSSSSES(WWNNWSSWNNWWNNEEES(WW|ENNWWWN(SEEESSNNWWWN|))|ENEE(SSW(SS|N|W)|NWNNN(ESSNNW|)(N|WWSSSENN(SSWNNNSSSENN|)))))))|ENN(ES|WWNEE))|E)|E(E|S))|SE(SWEN|)E))))|WSSWS(E|SW(SEWN|)NNNN(ESNW|)W))))|EE)|S))|SEESSE)|S)|SSW(N|W)))|S(SSS|WW))|W))|W)|W)|S)|S)|E)))))|E))))|NN(WNWESE|)E)|W|S)$\n"
